ggsave(filename = file_name)
}
for(map in all_maps) {
map
file_name <- paste(map, ".pdf", sep="")
ggsave(filename = file_name, device = NULL)
}
view(lleras_map)
velez_map
ggsave("uribe_map.pdf")
fajardo_map
ggsave("fajardo_map.pdf")
petro_map
ggsave("petro_map.pdf")
duque_map
ggsave("duque_map.pdf")
lleras_map
ggsave("lleras_map.pdf")
santos_map
ggsave("santos_map.pdf")
delaCalle_map
ggsave("delaCalle_map.pdf")
#bind list of dataframes to have a full dataset with a new column, "elite"
full_locations <- bind_rows(all_dfs, .id = "elite")
##################################
# 2_Data_Cleaning -- PS 239T     #
# Author: Elisabeth Earley       #
# Date: 4/25/18                  #
##################################
library(ggplot2)
library(dplyr)
library(ggmap)
elite_friends <- read.csv("friends_cleaned.csv", na.strings = c("", "NA"))  #read csv file
elite_friends <- elite_friends %>% na.omit()  #remove NAs                   #turn blanks to NA
options(scipen=999) #supress scientific notation
#create list of elite names
elites <- list('Alvaro Uribe Velez', 'Sergio Fajardo',
'Gustavo Petro', 'Ivan Duque Marquez',
'German Vargas Lleras', 'Juan Manuel Santos',
'Humberto de la Calle')
#sort a list of the unique names of locations alphabetically
#We will create a dictionary that references each location's long and lat
unq_locations <- elite_friends$location %>% as.character() %>% unique() %>% sort()
#this installs the register_google(key = "my_api_key") function to fix query limit
devtools::install_github("dkahle/ggmap")
#register an app online to use API key
google_maps_key <- "AIzaSyCtErSDaIcSCLg3QMhWy04Gt_FYTp7cwu4"
register_google(key = google_maps_key)
#create locations "dictionary" *not a technical dict
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
#Create an empty data.frame that we will be using in visualization
#to hold the coordinates of all unique locations
locations_df <- data.frame()
for (i in locations_dict) {
coord_vec <- c(i[[1]], i[[2]])
locations_df <- rbind(locations_df, coord_vec)
}
#separate the locations into dataframes for each elite!
#Repeat this command and name each dataframe accordingly.
#This is because I want to make graphs/charts for each elite on their own.
velez_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[1]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
velez_locations <- rbind(velez_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#repeat: fajardo
fajardo_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[2]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
fajardo_locations <- rbind(fajardo_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#repeat: petro
petro_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[3]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
petro_locations <- rbind(petro_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#repeat: duque
duque_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[4]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
duque_locations <- rbind(duque_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#repeat: lleras
lleras_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[5]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
lleras_locations <- rbind(lleras_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#repeat: santos
santos_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[6]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
santos_locations <- rbind(santos_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#repeat: delaCalle
delaCalle_locations <- data.frame()
max_length = length(elite_friends[,1])
i <- 1
k <- 1
while (i <= max_length) {
row <- elite_friends[i,]
if (row[[1]] == elites[7]) {
location <- row[[5]]
coord <- locations_dict[location]
coord_vec <- c(coord[[1]][[1]], coord[[1]][[2]])
delaCalle_locations <- rbind(delaCalle_locations, coord_vec)
k <- k + 1
}
i <- i + 1
}
#rename all column names to be consistent
colnames(velez_locations)<- c("latitude", "longitude")
colnames(fajardo_locations)<- c("latitude", "longitude")
colnames(duque_locations)<- c("latitude", "longitude")
colnames(petro_locations)<- c("latitude", "longitude")
colnames(lleras_locations)<- c("latitude", "longitude")
colnames(delaCalle_locations)<- c("latitude", "longitude")
colnames(santos_locations)<- c("latitude", "longitude")
#list of dataframes
all_dfs <- list("Alvaro Uribe Velez" = velez_locations, "Sergio Fajardo"=fajardo_locations,
"Gustavo Petro"=petro_locations, "Ivan Duque Marquez"=duque_locations,
"German Vargas Lleras"=lleras_locations, "Juan Manuel Santos"=santos_locations,
"Humberto de la Calle"=delaCalle_locations)
#bind list of dataframes to have a full dataset with a new column, "elite"
full_locations <- bind_rows(all_dfs, .id = "elite")
library(ggplot2)
library(maps)
library(RColorBrewer)
###################### PLOT MAPS ########################
colors <- list('Alvaro Uribe Velez' = 'red', 'Sergio Fajardo' = 'darkmagenta',
'Gustavo Petro' = 'cyan', 'Ivan Duque Marquez' = 'darkorange',
'German Vargas Lleras' = 'mediumpurple', 'Juan Manuel Santos'='blue',
'Humberto de la Calle' = 'dodgerblue')
#plot base map
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
full_map <- NULL
full_map <- ggplot(data=full_locations, aes(full_locations$latitude, full_locations$longitude)) +
mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "")
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=full_locations$latitude, y=full_locations$longitude)) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite)
#####################  CREATE A MAP FOR EVERY ELITE ##########################
velez_map <- NULL
velez_map <- ggplot(data=velez_locations, aes(velez_locations$latitude, velez_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`Alvaro Uribe Velez`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
fajardo_map <- NULL
fajardo_map <- ggplot(data=fajardo_locations, aes(fajardo_locations$latitude, fajardo_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`Sergio Fajardo`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
petro_map <- NULL
petro_map <- ggplot(data=petro_locations, aes(petro_locations$latitude, petro_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`Gustavo Petro`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
duque_map <- NULL
duque_map <- ggplot(data=duque_locations, aes(duque_locations$latitude, duque_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`Ivan Duque Marquez`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
lleras_map <- NULL
lleras_map <- ggplot(data=lleras_locations, aes(lleras_locations$latitude, lleras_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`German Vargas Lleras`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
santos_map <- NULL
santos_map <- ggplot(data=santos_locations, aes(santos_locations$latitude, santos_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`Juan Manuel Santos`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
delaCalle_map <- NULL
delaCalle_map <- ggplot(data=delaCalle_locations, aes(delaCalle_locations$latitude, delaCalle_locations$longitude)) + mapWorld +
geom_count(shape = 21, fill = colors$`Humberto de la Calle`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
facet_map
velez_map
full_map
mapWorld <- borders("world", colour="gray50", fill="gray50")
full_map <- NULL
full_map <- ggplot(data=full_locations, aes(full_locations$latitude, full_locations$longitude)) +
mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "")
full_map
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=as.numeric(full_locations$latitude), y=as.numeric(full_locations$longitude))) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite)
facet_map
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=as.numeric(full_locations$latitude), y=as.numeric(full_locations$longitude))) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite)
facet_map
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(full_locations$latitude, full_locations$longitude)) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite)
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(full_locations$latitude, full_locations$longitude)) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite)
facet_map
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=as.numeric(full_locations$latitude), y=as.numeric(full_locations$longitude))) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite) + scale_x_discrete()
facet_map
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=as.numeric(full_locations$latitude), y=as.numeric(full_locations$longitude))) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite) + scale_x_continuous()
facet_map
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
full_map <- NULL
full_map <- ggplot(data=full_locations, aes(full_locations$latitude, full_locations$longitude)) +
mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "")
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=as.numeric(full_locations$latitude), y=as.numeric(full_locations$longitude))) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite) + scale_x_continuous()
facet_map
mapWorld <- borders("world", colour="gray50", fill="gray50")
facet_map <- NULL
facet_map <- ggplot(data=full_locations, aes(x=as.numeric(full_locations$latitude), y=as.numeric(full_locations$longitude))) + mapWorld +
geom_count(shape = 21, color = "black",
show.legend = TRUE) + labs(x = "", y = "") +
facet_wrap(~elite)
facet_map
View(santos_map)
santos_map
petro_map <- NULL
petro_map <- ggplot(data=petro_locations, aes(as.numeric(petro_locations$latitude), as.numeric(petro_locations$longitude))) + mapWorld +
geom_count(shape = 21, fill = colors$`Gustavo Petro`, color = "black",
show.legend = FALSE) + labs(x = "", y = "")
petro_map
unq_locations
head(unq_locations)
head(locations_dict)
View(locations_dict)
locations_dict
unq_locations <- elite_friends$location %>% as.character() %>% tolower() %>% unique() %>% sort()
google_maps_key <- "AIzaSyCkMu1Y-YWflSFy3coAdFwSmOFsONVEy7Y4"
register_google(key = google_maps_key)
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
google_maps_key <- "AIzaSyD7qsoiGDmyvUWkGTCij9djYwtltkerNfA"
register_google(key = google_maps_key)
locations_dict <- list()
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
google_maps_key <- "AIzaSyCwEFfQQ_KyCvRkeZhg7XUbMlkJr6yM9KE"
register_google(key = google_maps_key)
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
View(locations_dict)
head(locations_dict)
google_maps_key <- "AIzaSyCwEFfQQ_KyCvRkeZhg7XUbMlkJr6yM9KE"
register_google(key = google_maps_key)
unq_locations
View(locations_dict)
View(locations_dict[["      anywhere"]])
View(locations_dict[[" bogota  "]])
View(locations_df)
devtools::install_github("dkahle/ggmap")
google_maps_key <- "AIzaSyCwEFfQQ_KyCvRkeZhg7XUbMlkJr6yM9KE"
register_google(key = google_maps_key)
locations_dict <- list()
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
View(locations_dict)
View(locations_dict[[" atlanta, ga"]])
library(dplyr)
library(ggmap)
elite_friends <- read.csv("friends_cleaned.csv", na.strings = c("", "NA"))  #read csv file
elite_friends <- elite_friends %>% na.omit()  #remove NAs                   #turn blanks to NA
options(scipen=999) #supress scientific notation
#create list of elite names
elites <- list('Alvaro Uribe Velez', 'Sergio Fajardo',
'Gustavo Petro', 'Ivan Duque Marquez',
'German Vargas Lleras', 'Juan Manuel Santos',
'Humberto de la Calle')
#sort a list of the unique names of locations alphabetically
#We will create a dictionary that references each location's long and lat
unq_locations <- elite_friends$location %>% as.character() %>% tolower() %>% unique() %>% sort()
#this installs the register_google(key = "my_api_key") function to fix query limit
#devtools::install_github("dkahle/ggmap")
#register an app online to use API key
google_maps_key <- "AIzaSyD1F5feYPPknWfMiVQsHHd7SGcY8LP4X8s"
register_google(key = google_maps_key)
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
View(locations_dict)
View(locations_dict[[" colombia "]])
locations_dict
locations_df <- data.frame()
for (i in locations_dict) {
coord_vec <- c(i[[1]], i[[2]])
locations_df <- rbind(locations_df, coord_vec)
}
View(locations_df)
?as.data.frame
View(locations_dict)
View(locations_dict[[" colombia"]])
coord_dict <- as.data.frame(locations_dict)
View(coord_dict)
rm(coord_dict)
typeof(locations_dict[[" colombia"]])
typeof(locations_dict[[" colombia"]][1])
locations_dict[[" colombia"]][1]
locations_dict[[" colombia"]][[1]]
typeof(locations_dict[[" colombia"]][[1]])
coord_dict <- data.frame(matrix(unlist(locations_dict), nrow=nrow(locations_dict), byrow=T),stringsAsFactors=FALSE)
length(locations_dict)
coord_dict <- data.frame(matrix(unlist(locations_dict), nrow=length(locations_dict), byrow=T),stringsAsFactors=FALSE)
View(coord_dict)
colnames(coord_dict)<- c("latitude", "longitude")
View(coord_dict)
typeof(coord_dict[1,3])
typeof(coord_dict[1,30])
typeof(coord_dict[1,399])
View(coord_dict)
typeof(coord_dict[1,399])
typeof(coord_dict[1,6])
coord_dict[1,6]
typeof(coord_dict[6,1])
coord_dict[6,1]
coord_dict <- data.frame(matrix(unlist(locations_dict),
nrow=length(locations_dict),
byrow=T),
stringsAsFactors=FALSE) %>% na.omit() %>%
]
coord_dict <- data.frame(matrix(unlist(locations_dict),
nrow=length(locations_dict),
byrow=T),
stringsAsFactors=FALSE) %>% na.omit()
View(coord_dict)
View(locations_dict)
locations_dict
locations_dict$`acapulco de juarez, guerrero`
coord_dict <- data.frame(matrix(locations_dict),
nrow=length(locations_dict),
byrow=T) %>% na.omit()
View(coord_dict)
coord_dict <- data.frame(unlist(locations_dict)) %>% na.omit()
?matrix
coord_dict <- as.matrix(locations_dict)
rm(coord_dict)
head(locations_dict)
coord_dict <- matrix(locations_dict, nrow = len(locations_dict), ncol = 3)
coord_dict <- matrix(locations_dict, nrow = length(locations_dict), ncol = 3)
lapply(locations_dict, write, "locations_dict.txt", append=TRUE)
lapply(locations_dict, write, "locations_dict.txt", append=TRUE, ncol=1000)
sapply(locations_dict, class)
class(locations_dict)
write.csv(rbind(unlist(locations_dict)), "locations_dict.csv")
write.csv(rbind(locations_dict), "locations_dict.csv")
write.csv(rbind(locations_dict), "locations_dic.csv")
write.csv(cbind(locations_dict), "locations_dic.csv")
write.csv(cbind(unlist(locations_dict)), "locations_dict.csv")
?cbind
View(coord_dict)
View(coord_dict[[3]])
coord_dict
rm(coord_dict)
locations_dic_df <- rbind_all(locations_dict)
write.csv(locations_dic_df, "loc_dict.csv", row.names = FALSE)
locations_dic_df <- bind_rows(locations_dict)
write.csv(locations_dic_df, "loc_dict.csv", row.names = FALSE)
nrow(locations_dict)
locations_dic_df <- bind_rows(locations_dict) %>% cbind(locations_dict[1:len(nrow(locations_dict))])
locations_dic_df <- bind_rows(locations_dict) %>% cbind(locations_dict[1:length(nrow(locations_dict))])
write.csv(locations_dic_df, "testloc_dict.csv", row.names = FALSE)
nrow(locations_dict)
locations_dic_df <- bind_rows(locations_dict) %>% cbind(names(locations_dict))
source('C:/Users/bbits/Desktop/Documentss/1 SCHOOL/1 POLITICAL SCIENCE/final_project_ps239t/2_data_cleaning.R')
write.csv(locations_dic_df, "test_dict.csv", row.names = FALSE)
locations_dic_df <- bind_rows(locations_dict) %>% cbind(names(locations_dict)) %>% na.omit()
write.csv(locations_dic_df, "test2_dict.csv", row.names = FALSE)
locations_dic_df <- bind_rows(locations_dict) %>% cbind(names(locations_dict))
write.csv(locations_dic_df, "locs_dict.csv", row.names = FALSE)
google_maps_key <- "AIzaSyCwLs9RHeWdHUXUlOKFYIqLXiWmO5PHZrc"
register_google(key = google_maps_key)
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
locations_dict$`amman, jordan`
locations_dict$mexico
google_maps_key <- "AIzaSyCtErSDaIcSCLg3QMhWy04Gt_FYTp7cwu4"
register_google(key = google_maps_key)
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
#register an app online to use API key
google_maps_key <- "AIzaSyDOtBmVaSncylHIukG5i_tL1gadTKSzihw"
register_google(key = google_maps_key)
#create locations "dictionary" *not a technical dict
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
google_maps_key <- "AIzaSyBWgYizuQoJwSzXzI3n_NtutLvo-RgBpjQ"
register_google(key = google_maps_key)
locations_dict <- list()
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
google_maps_key <- "AIzaSyCkMu1Y-YWflSFy3coAdFwSmOFsONVEy7Y"
register_google(key = google_maps_key)
locations_dict <- list()
#For each location, use Google Maps to try and get long/lat coordinates
#Store in dictionary! Wait time = 10 minutes
for (i in unq_locations) {
locations_dict[[i]] <- geocode(location = i)
}
